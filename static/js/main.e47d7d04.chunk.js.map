{"version":3,"sources":["pages/Home.js","pages/Login.js","pages/Admin.js","pages/Raport.js","pages/Sessions.js","sidebar.js","pages/App.js","serviceWorker.js","index.js"],"names":["Home","state","date","componentDidMount","fetch","then","response","json","data","setState","className","this","Component","Login","login","password","fetchedPassword","acces","handleChange","e","target","name","value","handleSubmit","preventDefault","window","location","reload","render","to","onSubmit","onChange","type","placeholder","Admin","action","method","cols","rows","Raport","props","content","Sessions","raports","raport","reverse","handleClick","id","filter","el","_id","closeRaport","onClick","map","key","title","right","href","App","path","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gSAqBeA,G,iNAnBbC,MAAQ,CACNC,KAAM,I,EAERC,kBAAoB,WAClBC,MAAM,aACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAAEP,KAAMM,EAAK,GAAGN,W,wEAG9C,OACE,yBAAKQ,UAAU,aACb,uBAAGA,UAAU,mBAAb,8BACyBC,KAAKV,MAAMC,W,GAbzBU,c,QCsEJC,E,2MApEbZ,MAAQ,CACNa,MAAO,GACPC,SAAU,GACVC,gBAAiB,GACjBC,OAAO,G,EAGTd,kBAAoB,WAClBC,MAAM,aACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAAEO,gBAAiBR,EAAK,GAAGO,e,EAG3DG,aAAe,SAAAC,GAAM,IAAD,EACMA,EAAEC,OAAlBC,EADU,EACVA,KAAMC,EADI,EACJA,MACd,EAAKb,SAAL,eACGY,EAAOC,K,EAIZC,aAAe,SAAAJ,GACbA,EAAEK,iBAGqB,YAArB,EAAKvB,MAAMa,OACX,EAAKb,MAAMc,WAAa,EAAKd,MAAMe,gBAEnC,EAAKP,SAAS,CACZQ,OAAO,IAENQ,OAAOC,SAASC,U,wEAGb,IAAD,OACP,OACE,oCACE,kBAAC,IAAD,CACEC,OAAQ,kBACN,EAAK3B,MAAMgB,MACT,kBAAC,IAAD,CAAUY,GAAG,WAEb,yBAAKnB,UAAU,aACb,0BAAMoB,SAAU,EAAKP,cACnB,2BACEQ,SAAU,EAAKb,aACfc,KAAK,OACLX,KAAK,QACLY,YAAY,UAEd,6BACA,2BACEF,SAAU,EAAKb,aACfc,KAAK,WACLX,KAAK,WACLY,YAAY,eAEd,6BACA,4BAAQvB,UAAU,aAAlB,qB,GA1DEE,aC2BLsB,EA3BD,WACZ,OACE,oCACE,6BACE,0BAAMC,OAAO,eAAeC,OAAO,QACjC,2BACE1B,UAAU,gBACVsB,KAAK,OACLX,KAAK,QACLY,YAAY,eAGd,6BACA,8BACEI,KAAK,KACLC,KAAK,KACLjB,KAAK,UACLY,YAAY,oBAEd,6BACA,4BAAQvB,UAAU,eAAlB,mBCVK6B,EAVA,SAAAC,GACb,OACE,oCACE,yBAAK9B,UAAU,kBACb,2BAAI8B,EAAMC,YCgDHC,E,2MAlDbzC,MAAQ,CACN0C,QAAS,GACTC,OAAQ,I,EAEVzC,kBAAoB,WAClBC,MAAM,gBACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAAEkC,QAASnC,EAAKqC,gB,EAEhDC,YAAc,SAAAC,GACZ,IAAIH,EAAS,EAAK3C,MAAM0C,QAAQK,QAAO,SAAAC,GAAE,OAAIA,EAAGC,MAAQH,KACxD,EAAKtC,SAAS,CACZmC,OAAQA,EAAO,GAAGH,W,EAGtBU,YAAc,WACZ,EAAK1C,SAAS,CACZmC,OAAQ,M,wEAIF,IAAD,OACP,OACE,oCACE,6BACE,uBAAGlC,UAAU,qBAAb,kBACCC,KAAKV,MAAM2C,OACV,yBAAKlC,UAAU,iBACb,kBAAC,EAAD,CAAQ+B,QAAS9B,KAAKV,MAAM2C,SAC5B,4BAAQlC,UAAU,aAAa0C,QAASzC,KAAKwC,aAA7C,gBAIA,KACHxC,KAAKV,MAAM0C,QAAQU,KAAI,SAAAT,GAAM,OAC5B,yBAAKlC,UAAU,SAAS4C,IAAKV,EAAOM,KAClC,wBACExC,UAAU,eACV0C,QAAS,kBAAM,EAAKN,YAAYF,EAAOM,OAEtCN,EAAOW,iB,GAzCD3C,a,QCAR,WAAA4B,GACb,OACE,oCACE,kBAAC,QAAD,CAAMgB,OAAK,GACT,uBAAG9C,UAAU,YAAY+C,KAAK,KAA9B,yBAIA,uBAAG/C,UAAU,YAAY+C,KAAK,aAA9B,WAIA,uBAAG/C,UAAU,YAAY+C,KAAK,UAA9B,gBCsBOC,E,2MA3BbzD,MAAQ,G,wEAEN,OACE,oCACE,kBAAC,EAAD,MAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO0D,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,c,GAnBI/C,aCGEgD,QACW,cAA7BnC,OAAOC,SAASmC,UAEe,UAA7BpC,OAAOC,SAASmC,UAEhBpC,OAAOC,SAASmC,SAASC,MACvB,2DCZNC,IAASnC,OAAO,kBAAC,EAAD,MAASoC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/D,MAAK,SAAAgE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e47d7d04.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nclass Home extends Component {\r\n  state = {\r\n    date: \"\"\r\n  };\r\n  componentDidMount = () => {\r\n    fetch(\"/api/date\")\r\n      .then(response => response.json())\r\n      .then(data => this.setState({ date: data[0].date }));\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"main-view\">\r\n        <p className=\"main-view__date\">\r\n          Data następnej sesji: {this.state.date}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\nimport { Redirect, Route } from \"react-router-dom\";\r\nclass Login extends Component {\r\n  state = {\r\n    login: \"\",\r\n    password: \"\",\r\n    fetchedPassword: \"\",\r\n    acces: false\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    fetch(\"/api/date\")\r\n      .then(response => response.json())\r\n      .then(data => this.setState({ fetchedPassword: data[1].password }));\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.target;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    if (\r\n      this.state.login === \"Belithe\" &&\r\n      this.state.password === this.state.fetchedPassword\r\n    )\r\n      this.setState({\r\n        acces: true\r\n      });\r\n    else window.location.reload();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Route\r\n          render={() =>\r\n            this.state.acces ? (\r\n              <Redirect to=\"/admin\" />\r\n            ) : (\r\n              <div className=\"main-view\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                  <input\r\n                    onChange={this.handleChange}\r\n                    type=\"text\"\r\n                    name=\"login\"\r\n                    placeholder=\"Login\"\r\n                  />\r\n                  <br />\r\n                  <input\r\n                    onChange={this.handleChange}\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    placeholder=\"Hasło\"\r\n                  />\r\n                  <br />\r\n                  <button className=\"btn-admin\">Zaloguj</button>\r\n                </form>\r\n              </div>\r\n            )\r\n          }\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\n\r\nconst Admin = () => {\r\n  return (\r\n    <>\r\n      <div>\r\n        <form action=\"/api/raports\" method=\"POST\">\r\n          <input\r\n            className=\"raports-title\"\r\n            type=\"text\"\r\n            name=\"title\"\r\n            placeholder=\"Tytuł\"\r\n          />\r\n\r\n          <br />\r\n          <textarea\r\n            cols=\"30\"\r\n            rows=\"10\"\r\n            name=\"content\"\r\n            placeholder=\"Treść\"\r\n          ></textarea>\r\n          <br />\r\n          <button className=\"btn-raports\">Wyślij</button>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Admin;\r\n","import React from \"react\";\r\n\r\nconst Raport = props => {\r\n  return (\r\n    <>\r\n      <div className=\"raport-content\">\r\n        <p>{props.content}</p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Raport;\r\n","import React, { Component } from \"react\";\r\nimport Raport from \"./Raport\";\r\n\r\nclass Sessions extends Component {\r\n  state = {\r\n    raports: [],\r\n    raport: \"\"\r\n  };\r\n  componentDidMount = () => {\r\n    fetch(\"/api/raports\")\r\n      .then(response => response.json())\r\n      .then(data => this.setState({ raports: data.reverse() }));\r\n  };\r\n  handleClick = id => {\r\n    let raport = this.state.raports.filter(el => el._id === id);\r\n    this.setState({\r\n      raport: raport[0].content\r\n    });\r\n  };\r\n  closeRaport = () => {\r\n    this.setState({\r\n      raport: \"\"\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div>\r\n          <p className=\"main-view__raport\">Amren: raporty</p>\r\n          {this.state.raport ? (\r\n            <div className=\"popup-content\">\r\n              <Raport content={this.state.raport} />\r\n              <button className=\"raport-btn\" onClick={this.closeRaport}>\r\n                Zwiń X\r\n              </button>\r\n            </div>\r\n          ) : null}\r\n          {this.state.raports.map(raport => (\r\n            <div className=\"raport\" key={raport._id}>\r\n              <h3\r\n                className=\"raport-title\"\r\n                onClick={() => this.handleClick(raport._id)}\r\n              >\r\n                {raport.title}\r\n              </h3>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sessions;\r\n","import React from \"react\";\r\nimport { slide as Menu } from \"react-burger-menu\";\r\n\r\nexport default props => {\r\n  return (\r\n    <>\r\n      <Menu right>\r\n        <a className=\"menu-item\" href=\"/\">\r\n          Strona główna\r\n        </a>\r\n\r\n        <a className=\"menu-item\" href=\"/sessions\">\r\n          Raporty\r\n        </a>\r\n\r\n        <a className=\"menu-item\" href=\"/login\">\r\n          Logowanie\r\n        </a>\r\n      </Menu>\r\n    </>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"../App.css\";\nimport Home from \"./Home\";\nimport Login from \"./Login\";\nimport Admin from \"./Admin\";\nimport Sessions from \"./Sessions.js\";\nimport SideBar from \"../sidebar\";\n\nclass App extends Component {\n  state = {};\n  render() {\n    return (\n      <>\n        <SideBar />\n\n        <Router>\n          <Switch>\n            <Route path=\"/sessions\">\n              <Sessions />\n            </Route>\n            <Route path=\"/login\">\n              <Login />\n            </Route>\n            <Route path=\"/admin\">\n              <Admin />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </Router>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./pages/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}